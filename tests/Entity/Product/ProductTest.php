<?php

/*
 * This file is autogenerated at 10/18/2016 11:48am by gpupo/common-sdk
 * @see <http://www.g1mr.com/common-sdk/>
 */

namespace Entity\Product;

use Gpupo\CommonSdk\Entity\EntityInterface;
use Gpupo\Tests\CommonSdk\Traits\EntityTrait;
use Gpupo\Tests\MercadolivreSdk\TestCaseAbstract;
use Gpupo\MercadolivreSdk\Entity\Product\Product;

/**
 * @coversDefaultClass \Gpupo\MercadolivreSdk\Entity\Product\Product
 *
 * @method string getTitle()    Acesso a title
 * @method setTitle(string $title)    Define title
 * @method string getCategoryId()    Acesso a category_id
 * @method setCategoryId(string $category_id)    Define category_id
 * @method float getPrice()    Acesso a price
 * @method setPrice(float $price)    Define price
 * @method string getCurrencyId()    Acesso a currency_id
 * @method setCurrencyId(string $currency_id)    Define currency_id
 * @method string getBuyingMode()    Acesso a buying_mode
 * @method setBuyingMode(string $buying_mode)    Define buying_mode
 * @method string getListingTypeId()    Acesso a listing_type_id
 * @method setListingTypeId(string $listing_type_id)    Define listing_type_id
 * @method string getCondition()    Acesso a condition
 * @method setCondition(string $condition)    Define condition
 * @method string getDescription()    Acesso a description
 * @method setDescription(string $description)    Define description
 * @method Gpupo\MercadolivreSdk\Entity\Product\Variations getVariations()    Acesso a variations
 * @method setVariations(Gpupo\MercadolivreSdk\Entity\Product\Variations $variations)    Define variations
 *
 */
class ProductTest extends TestCaseAbstract
{
  use EntityTrait;

  /**
   * @return \Gpupo\MercadolivreSdk\Entity\Product\Product
   */
  public function dataProviderProduct()
  {
      $data = json_decode(file_get_contents('Resources/fixture/Product/item.json'), true);

      return $this->dataProviderEntitySchema(Product::class, $data);
  }

    /**
     * @testdox ``getSchema()``
     * @cover ::getSchema
     * @dataProvider dataProviderProduct
     * @test
     */
    public function getSchema(Product $product)
    {
        $this->markTestIncomplete('getSchema() incomplete!');
    }


    /**
     * @testdox Possui método ``getTitle()`` para acessar Title
     * @dataProvider dataProviderProduct
     * @cover ::get
     * @cover ::getSchema
     * @small
     * @test
     */
    public function getTitle(Product $product, $expected = null)
    {
        $this->assertSchemaGetter('title', 'string', $product, $expected);
    }

    /**
     * @testdox Possui método ``setTitle()`` que define Title
     * @dataProvider dataProviderProduct
     * @cover ::set
     * @cover ::getSchema
     * @small
     * @test
     */
    public function setTitle(Product $product, $expected = null)
    {
        $this->assertSchemaSetter('title', 'string', $product);
    }

    /**
     * @testdox Possui método ``getCategoryId()`` para acessar CategoryId
     * @dataProvider dataProviderProduct
     * @cover ::get
     * @cover ::getSchema
     * @small
     * @test
     */
    public function getCategoryId(Product $product, $expected = null)
    {
        $this->assertSchemaGetter('category_id', 'string', $product, $expected);
    }

    /**
     * @testdox Possui método ``setCategoryId()`` que define CategoryId
     * @dataProvider dataProviderProduct
     * @cover ::set
     * @cover ::getSchema
     * @small
     * @test
     */
    public function setCategoryId(Product $product, $expected = null)
    {
        $this->assertSchemaSetter('category_id', 'string', $product);
    }

    /**
     * @testdox Possui método ``getPrice()`` para acessar Price
     * @dataProvider dataProviderProduct
     * @cover ::get
     * @cover ::getSchema
     * @small
     * @test
     */
    public function getPrice(Product $product, $expected = null)
    {
        $this->assertEquals($product['price'], $expected['price']);
    }

    /**
     * @testdox Possui método ``setPrice()`` que define Price
     * @dataProvider dataProviderProduct
     * @cover ::set
     * @cover ::getSchema
     * @small
     * @test
     */
    public function setPrice(Product $product, $expected = null)
    {
        $this->assertSchemaSetter('price', 'number', $product);
    }

    /**
     * @testdox Possui método ``getCurrencyId()`` para acessar CurrencyId
     * @dataProvider dataProviderProduct
     * @cover ::get
     * @cover ::getSchema
     * @small
     * @test
     */
    public function getCurrencyId(Product $product, $expected = null)
    {
        $this->assertSchemaGetter('currency_id', 'string', $product, $expected);
    }

    /**
     * @testdox Possui método ``setCurrencyId()`` que define CurrencyId
     * @dataProvider dataProviderProduct
     * @cover ::set
     * @cover ::getSchema
     * @small
     * @test
     */
    public function setCurrencyId(Product $product, $expected = null)
    {
        $this->assertSchemaSetter('currency_id', 'string', $product);
    }

    /**
     * @testdox Possui método ``getBuyingMode()`` para acessar BuyingMode
     * @dataProvider dataProviderProduct
     * @cover ::get
     * @cover ::getSchema
     * @small
     * @test
     */
    public function getBuyingMode(Product $product, $expected = null)
    {
        $this->assertSchemaGetter('buying_mode', 'string', $product, $expected);
    }

    /**
     * @testdox Possui método ``setBuyingMode()`` que define BuyingMode
     * @dataProvider dataProviderProduct
     * @cover ::set
     * @cover ::getSchema
     * @small
     * @test
     */
    public function setBuyingMode(Product $product, $expected = null)
    {
        $this->assertSchemaSetter('buying_mode', 'string', $product);
    }

    /**
     * @testdox Possui método ``getListingTypeId()`` para acessar ListingTypeId
     * @dataProvider dataProviderProduct
     * @cover ::get
     * @cover ::getSchema
     * @small
     * @test
     */
    public function getListingTypeId(Product $product, $expected = null)
    {
        $this->assertSchemaGetter('listing_type_id', 'string', $product, $expected);
    }

    /**
     * @testdox Possui método ``setListingTypeId()`` que define ListingTypeId
     * @dataProvider dataProviderProduct
     * @cover ::set
     * @cover ::getSchema
     * @small
     * @test
     */
    public function setListingTypeId(Product $product, $expected = null)
    {
        $this->assertSchemaSetter('listing_type_id', 'string', $product);
    }

    /**
     * @testdox Possui método ``getCondition()`` para acessar Condition
     * @dataProvider dataProviderProduct
     * @cover ::get
     * @cover ::getSchema
     * @small
     * @test
     */
    public function getCondition(Product $product, $expected = null)
    {
        $this->assertSchemaGetter('condition', 'string', $product, $expected);
    }

    /**
     * @testdox Possui método ``setCondition()`` que define Condition
     * @dataProvider dataProviderProduct
     * @cover ::set
     * @cover ::getSchema
     * @small
     * @test
     */
    public function setCondition(Product $product, $expected = null)
    {
        $this->assertSchemaSetter('condition', 'string', $product);
    }

    /**
     * @testdox Possui método ``getDescription()`` para acessar Description
     * @dataProvider dataProviderProduct
     * @cover ::get
     * @cover ::getSchema
     * @small
     * @test
     */
    public function getDescription(Product $product, $expected = null)
    {
        $this->assertSchemaGetter('description', 'string', $product, $expected);
    }

    /**
     * @testdox Possui método ``setDescription()`` que define Description
     * @dataProvider dataProviderProduct
     * @cover ::set
     * @cover ::getSchema
     * @small
     * @test
     */
    public function setDescription(Product $product, $expected = null)
    {
        $this->assertSchemaSetter('description', 'string', $product);
    }

    /**
     * @testdox Possui método ``getVariations()`` para acessar Variations
     * @dataProvider dataProviderProduct
     * @cover ::get
     * @cover ::getSchema
     * @small
     * @test
     */
    public function getVariations(Product $product, $expected = null)
    {
        $this->assertSchemaGetter('variations', 'object', $product, $expected);
    }

    /**
     * @testdox Possui método ``setVariations()`` que define Variations
     * @dataProvider dataProviderProduct
     * @cover ::set
     * @cover ::getSchema
     * @small
     * @test
     */
    public function setVariations(Product $product, $expected = null)
    {
        $this->assertSchemaSetter('variations', 'object', $product);
    }


}
